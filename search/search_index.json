{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RIDAGOP IDS toolkit","text":"<p>What is the IDS toolkit? </p> <p>Indigenous data sovereignty involves ensuring that Indigenous people have ownership and control over the collection, use, and management of their own data. Centralized data repositories can make it difficult for Indigenous communities to access and control their own data. They may be subject to restrictive policies and procedures that limit who can access the data, how it can be used, and where it can be stored. This can undermine Indigenous self-determination and limit the ability of Indigenous communities to use their own data to inform decision-making, planning, and development. </p> <p>The Research on Indigenous Data Governance Protocols (RIDAGOP) toolkit tries to tackle some of these problems, by allowing developers to create data-management processes that can interact with data repositories and can be used with custom built websites, tailored to the requirements of individuals communities, peoples, institutions or requests.  </p> <p>The toolkit's data management processes can include: </p> <ul> <li> <p>Storing data in ways that are secure, reliable, and accessible to Indigenous communities, peoples, organisations or institutions.  </p> </li> <li> <p>Sharing data with other Indigenous communities and organizations, as well as with non-Indigenous entities, in ways that are respectful and protect Indigenous rights. </p> </li> <li> <p>Updating and maintaining metadata, which helps to contextualize and safeguard Indigenous data. </p> </li> </ul> <p>The RIDAGOP toolkit allows developers to create data management processes, generate (or embed them into) web-based user interfaces and make them usable by communities. </p> <p>The toolkit is designed in such a way that it can be connected to any type of repository system, given this repository offers an API 1. It is also not necessary that the toolkit is \u201cinstalled\u201d or served from on the repository server, or any specific website. It can be hosted on any website and still interact with the defined repositories. </p> <p>The toolkit can be distinguished into 3 main parts. Specifically, it can be separated into 3 different types of files that interplay within the toolkit. </p> <p>The following diagram shows a general overview of how the different components of the toolkit interact with each other. </p> <p></p>"},{"location":"#processes","title":"Processes","text":"<p>Process files are abstract descriptions of what a process is supposed to do and what the individual components (e.g., data-repositories, metadata catalogues, ...) are required to be capable of, in order to function within this process. It does not specify which repository or datasets should be used.</p> <p>An example of a process would be allowing communities to add their own meta-data to dataset. The Local Contexts Project developed TK and BC Labels (traditional knowledge and Biocultural) through sustained partnership within Indigenous communities. \u201cThe Labels allow communities to express local and specific conditions for sharing and engaging in future research and relationships in ways that are consistent with already existing community rules, governance and protocols for using, sharing and circulating knowledge and data.\u201d  One process would be to allow communities to add their own Labels to any dataset they wish to. </p> <p>A second more intrinsic process would be restricting data access by default and having a convenient but complete data application process in place. No one would not directly have access to the data but would need to fill out a data access application form, which would be reviewed by somehow having some authority to grant access (CLARIFY AUTHORITY?). This process could be implemented in many ways, adjusting, how the application form would look like, how the evaluation is conducted. In addition, it could be that the data authorities only provide a subset of the data, or even only execute the analysis themselves and only provide the results, keeping the data for themselves, though whole time.  </p>"},{"location":"#bridges","title":"Bridges","text":"<p>Bridges: Researchers that want to publish their data can often choose between many different repository systems or might be mandated to publish on specific repository. There are repositories by individual universities or by consortiums of universities. There are also international data repositories like Zenodo or the European data portal. While the general functionalities of these repositories might be similar, some provide specific functions. Bridges are files that describe the capabilities of specific data-repositories and how they are used, so that these repositories can work with toolkit processes. It specifies, how the API of the repository looks like and how they map to capabilities. </p> <p>For example in order to make Zenodo work someone would need to write a specification file that would include a) the JavaScript code, that can interact with the repository and b) some mapping between the functions of that code and generic capabilities like creating a new dataset, changing metadata or adding or removing dataset files.  </p>"},{"location":"#process-pages","title":"Process pages","text":"<p>Process-pages description files that bring specific processes and bridges together in order to complete a process on a specific data-repository. A process-page file can generate a whole website that allows the completion of a process, which allows individuals to interact with the repositories. However, it is also possible to design a custom website and connect relevant interactive elements (input fields, buttons, etc.) to the toolkit functionalities. </p> <p>Both individual processes mentioned above could be used in their individual process-pages (a single webpage). When a community knows on which repository system their data is hosted the process page, could bring for that repository the bridge and their processes together allowing them to manage their data, without spending too much time on the repository system. This process pages, could be designed in such a way that it meets their needs in terms of accessibility and usability. </p>"},{"location":"#how-does-the-toolkit-work-with-different-data-repositories","title":"How does the toolkit work with different data-repositories","text":"<p>When a process describes the functioning of a service, it does not need to describe the exact endpoints of a particular service.  The process-page assigns bridge which define, which particular service to use and how to communicate it. Generally speaking there are two ways of doing that. Either through a bridge-module, which is a simply a javascript module,  that exports functions which communicate with the repository/service or with an OpenAPI json file, which contains all endpoints of the service.</p>"},{"location":"#what-is-required-to-create-a-process-for-a-specific-data-repository","title":"What is required to create a Process for a specific Data repository","text":""},{"location":"example_lc_hub_labels/","title":"Local Contexts Hub Label","text":""},{"location":"example_lc_hub_labels/#introduction","title":"Introduction","text":"<p>...</p>"},{"location":"example_lc_hub_labels/#structure","title":"Structure","text":"<p>The Local Contexts Hub Labels Process is available as a generated gui version and with a html page, which includes a specific UI for that process.</p> <p>The specific instance files that are used for the process are:</p> <pre><code>  process_page/lc_hub_labels.json\n  bridge/dataverse_bridge_OPENAPI.json\n  openapi/dataverse3.json\n  openapi/localcontextshub.json\n</code></pre> <p>The process uses 2 services, Local Contexts Hub and Dataverse, which are both connected with OpenAPI bridge. The Bridge-definition of dataverse is in a specific json file, while the one for Local Contexts Hub is in the process-page file.</p> <p>In addition to the bridge, the process also includes a process module,  <code>scripts/process/lc_hub_labels.js</code>.</p> <p>The User inputs for the 3 services contain the following input fields:</p> <p>for the lc_hub service...</p> <pre><code>{\n  \"inputFields\": {\n    \"project_id\": {\n      \"label\": \"LC Hub Project ID\"\n    }\n  },\n  \"buttons\": {\n    \"fetch_labels\": {\n      \"label\": \"Fetch labels\",\n      \"triggerActivity\": \"read_lc_hub_data\"\n    }\n  }\n}\n</code></pre> <p>and</p> <p>for the data_repo (dataverse) service...</p> <pre><code>{\n  \"inputFields\": {\n    \"dataverseInstance\": {\n      \"label\": \"Dataverse instance\",\n      \"default\": \"https://ridagop.net\"\n    },\n    \"data_repo_id\": {\n      \"label\": \"Dataverse dataset doi\",\n      \"inputActions\": {\n        \"autoAction\": \"read_dataset\"\n      }\n    },\n    \"apiKey\": {\n      \"label\": \"API Key\"\n    }\n  },\n  \"buttons\": {\n    \"udpate\": {\n      \"label\": \"Update Metadata\",\n      \"triggerActivity\": \"postDatasetMetadata\"\n    }\n  }\n}\n</code></pre> <p>The Local Contexts service has only the one following activity:</p> <ul> <li>Fetch project data, which fetches the LC Hub project metadata of the project given in the <code>project_id</code> input field<ul> <li>Sub-activity: Display project labels, which displays the Labels of the project in the service output section</li> </ul> </li> </ul> <p>The Dataverse service has 2 activities:</p> <ul> <li>Fetch dataset metadata\"<ul> <li>Sub-activity: find LCHub Project Reference<ul> <li>Sub-activity: Create LCHub Reference text</li> <li>Sub-activity: Update the metadata of the dataset</li> <li>Sub-activity: Display updated dataset description</li> </ul> </li> </ul> </li> </ul>"},{"location":"schemas/","title":"Schemas","text":"<ul> <li>Process-Page</li> <li>Process</li> <li>Bridge</li> </ul>"},{"location":"technical_overview/","title":"Technical overview","text":"<p>The IDS toolkit is a simple javascript module that can be integrated into any website. When the module is loaded on a webpage, a process-page can be initiated by calling the global <code>_ids_init_</code> function, with the url of the process-page description file as argument.</p> <p>The Process-Page is a json file that describes the process-page. It links (or includes) the process, which describe the services of a process, which contain activities.</p> <p>The essential parts that define what a process can do, and how a user can interact with it, are the activities and the ui-elements of services.</p> <p>The toolkit provides a set of json-schema files, that can be used to validate the process-page, process, bridge. There is also a json-schema file that integrates all of them and provides validation for an integrated proces-page description file. The json-schemas are described here in more detail in the Schemas section.</p> <p></p> <p>Following components of a complete process can be separated into different files json:</p> <ul> <li>Process-Page</li> <li>Process</li> <li>Bridge</li> <li>Bridge-execution (one of the following)<ul> <li>OpenAPI-specification</li> <li>client-module (javascript module)</li> </ul> </li> </ul> <p>However, it also possible to combine all components into one file (except the client-module).</p> <p>In addition, there can be separate javascript modules, that be referenced by specific components:</p> <ul> <li>Process-Page module</li> <li>Process module</li> <li>Bridge module</li> </ul> <p>These modules can be used to define custom functions, that can be used for activities which modify some data before or after interacting with a service. When a function is defined in multiple modules, the one of the most upper one module is used.</p> <p>Further detail about the components can be found in their respective API documentation.</p>"},{"location":"technical_overview/#view-modes","title":"View modes","text":"<p>Process pages can be displayed in two different view modes. Either the page can be completely generated, meaning all input html elements will be generated (build-mode) in map-mode, where the defined interaction elements will be mapped to existing html on the page. Read more about the 2 view modes in the View Modes section.</p>"},{"location":"technical_overview/#process","title":"Process","text":"<p>A process defines a set of services, which describe how the user can interact with external services.</p> <p>A service, which has a bridge defines a set of activities and ui-elements that can be used to interact with the service. Next to the services the process can also define a <code>common</code> object, activities and ui-elements. This is particular useful, when activities, need to call activities from other services (in subActivities).</p> <p>TODO...</p> <p>Read here full details of the process schema.</p>"},{"location":"technical_overview/#services","title":"Services","text":"<p>Services are defined within a process and represent the interactions with external services that is used in the process. Processes need to be defined in both the process-page and the process instance. However the main part of a services, which are the definitions of the activities and ui-elements, are defined in the process.</p> <p>Most importantly the process-page definition of a service can (full schema):</p> <ul> <li>define a new bridge</li> <li>define new autostart activities (&lt;- ??? REF)</li> <li>specify to show/hide sections of the UI</li> <li>Define additional service-wide parameters</li> <li>define additional text-fields and buttons (that can trigger activities)</li> </ul> <p>The process instance defines the crucial parts of a service, which are (full schema):</p> <ul> <li>The bridge</li> <li>activities</li> <li>autostart activities</li> <li>sequences</li> <li>service wide parameters</li> </ul>"},{"location":"technical_overview/#ui-elements","title":"UI-Elements","text":"<p>The UI-Elements are defined per service. There are five types of UI-Elements that can be defined, which can be used for activities:</p> <ul> <li>Input fields: For text input</li> <li>Buttons: Buttons can be used to trigger activities</li> <li>Selects: For selecting a value from a list</li> <li>Checkboxes: To select from a boolean option</li> <li>File-inputs: To load files that can be used as input for activities</li> </ul> <p>See the UI-Elements section for more details.</p>"},{"location":"technical_overview/#activities","title":"Activities","text":"<p>Activities are defined in the process and describe the interaction with a service. Activities are referring to some execution, which is defined in the bridge of the service.</p>"},{"location":"technical_overview/#activity-execution","title":"Activity execution","text":"<p>Activities must either reference a <code>bridgeCapability</code> or <code>moduleFunction</code>. A bridgeCapability is a reference to a bridge, which is defined in the process. A moduleFunction is a reference to a capability of the bridge of the service, while the bridge is defined in the process. The moduleFunction can be used to call a function of the bridge, which is defined in the bridge module. The bridge module is defined in the modules of the process-page or process.</p>"},{"location":"technical_overview/#required-activities","title":"Required activities","text":"<p>Activities can refer to other activities (of the same service) that need to be executed before, this activity can be executed. This is in order to guarantee that some data, that is required by an activity are loaded/processed (by the required activities).</p>"},{"location":"technical_overview/#activity-parameter","title":"Activity parameter","text":"<p>Activities generally require some parameters, which are the parameters of the execution of the activity. The parameter description defines where the values of the parameters are coming from. The following parameter sources are possible:</p> <ul> <li>Parent</li> <li>Previous</li> <li>Field</li> <li>QueryParam</li> <li>Constant</li> <li>FileInput</li> <li>Store</li> <li>Generate</li> <li>Dynamic</li> </ul>"},{"location":"technical_overview/#preprocess-execution","title":"Preprocess execution","text":"<p>It is also possible to refer to a module-function that is executed before the activity is executed. The preprocess activity takes the same parameters as the actual activity in form of a json-object (keys are parameter names) and can return json objects, where every key overwrites the parameter passed to the actual activity. Preprocess can also throw Errors, with the <code>cause</code> <code>cancel</code>, in order to cancel the activity execution.</p>"},{"location":"technical_overview/#handling-activity-results","title":"Handling activity results","text":""},{"location":"technical_overview/#storing-results","title":"Storing results","text":"<p>The results of an activity can be stored in order to use them in other activities. The result can be stored in three different contexts, which defines, which other activities can access them. These contexts are:</p> <ul> <li>Process: The result can be accessed by all activities of the process</li> <li>Service: The result can be accessed by all activities of the service</li> <li>Activity: The result can be accessed by sub-activities</li> </ul>"},{"location":"technical_overview/#special-results-handling","title":"Special results handling","text":"<p>Besides storing the results, there are also some special results handling options:</p>"},{"location":"technical_overview/#html-output","title":"Html Output","text":"<p>The result of of an activity can be some HTML, which can be displayed in the UI.</p> <p>For generated UIs there is a standard output section for each service, in that case, the property <code>resultAsOutputHtml</code> just needs to be <code>true</code>. For mapped UIs, the property <code>resultAsOutputHtml</code> should specify a <code>string</code>, which should be the <code>id</code> of the html element, where the result should be displayed.</p>"},{"location":"technical_overview/#dynamic-ui-elements","title":"Dynamic UI Elements","text":"<p>The result of an activity can also be used to dynamically generate UI elements. The result of the activity should be a json-object that has the same structure of service uis (schema: Process Service-UI) The Ui-elements are added the Html-Element with the id <code>{service.name}_dyn_ui</code>.</p>"},{"location":"technical_overview/#sub-activities","title":"Sub-activities","text":"<p>An activity can also define sub-activities. These sub-activities are executed after the activity main (<code>parentActivity</code>) is executed.</p>"},{"location":"technical_overview/#bridge","title":"Bridge","text":"<p>Each service requires a bridge, which defines how the activities are executed. There are two basic types of bridges:</p> <ul> <li>OpenAPI: The bridge is defined by an OpenAPI specification. The activities are executed by calling the endpoints of   the OpenAPI specification. Learn more about OpenAPI at openapi.org</li> <li>Client-Module: The bridge is defined by a javascript module, which defines functions that can be called by the   activities. </li> </ul>"},{"location":"view_modes/","title":"View modes","text":"<p>Process pages can be displayed in two different view modes.</p>"},{"location":"schemas/bridge/","title":"RIDAGOP toolkit Bridge-Schema","text":"<p>Describes the capabilities.</p>"},{"location":"schemas/bridge/#properties","title":"Properties","text":"<ul> <li><code>execute</code> (object) (required) : Defines the type of execution. Either by using an OpenAPI-Specification or by using a client library.<ul> <li><code>One of (1)</code>: OpenAPI-Specification.<ul> <li><code>openapiSchemaUri</code> (string/format: uri-reference) (required) : The URI of the OpenAPI-Specification.</li> </ul> </li> <li><code>One of (2)</code>: Client library module.<ul> <li><code>apiClientModuleUri</code> (string/format: uri-reference) (required) : The URI of the module that contains the client library.</li> </ul> </li> </ul> </li> <li><code>capabilities</code> (object) (required) : Defines the capabilities of the bridge.<ul> <li>Additional Properties (object): Each name defines a capability. The allowed names are defined in the capabilities_names_list.json file.<ul> <li><code>operation</code>: Specifies an OpenAPI operation that should be executed. Refer to B-Operation.</li> <li><code>functionName</code> (string): Specifies the name of the function (in case of a client library).</li> </ul> </li> </ul> </li> <li><code>errorMessagePath</code> (string): Relative json-path in the response, where an error-message is located, if the response is not a 2XX answer.</li> <li><code>supportModuleUri</code> (string/format: uri): The URI of the module that contains the support functions.</li> </ul>"},{"location":"schemas/bridge/#definitions","title":"Definitions","text":""},{"location":"schemas/bridge/#b-operation","title":"B-Operation","text":"<ul> <li> <p><code>B-Operation</code> (object): Specifies an OpenAPI operation that is executed.</p> <ul> <li><code>path</code> (string): The path of the OpenAPI operation.</li> <li><code>method</code> (string): The method of the OpenAPI operation. Must be one of: <code>['get', 'post', 'patch', 'put', 'delete']</code>.</li> <li><code>operationId</code> (string): The operationId of the OpenAPI operation.</li> </ul> <p>Examples: <code>json {     \"path\": \"/api/v1/endpoint\",     \"method\": \"get\" }</code></p> <p><code>json {     \"operationId\": \"getEndpoint\" }</code></p> </li> </ul>"},{"location":"schemas/process-page/","title":"RIDAGOP toolkit ProcessPage-Schema","text":"<p>A process-page description file for the RIDAGOP toolkit</p>"},{"location":"schemas/process-page/#properties","title":"Properties","text":"<ul> <li><code>title</code> (string): The title of the process page.</li> <li><code>process</code> (object) (required) : The process to be used. Either the full instance or a uri to the process description.<ul> <li><code>comment</code> (string): A comment for other developers.</li> <li><code>One of (1)</code><ul> <li><code>uri</code> (string/format: uri) (required) : The uri to the process description.</li> </ul> </li> <li><code>One of (2)</code><ul> <li><code>instance</code> (required) : The full process instance, which needs to be a valid Process. Refer to process.</li> </ul> </li> </ul> </li> <li><code>services</code> (object) (required) : Process-page description for the services to be used in the process. The services here must match the services in the process.<ul> <li>Additional Properties: Keys are service names. Refer to PP-Service.</li> </ul> </li> <li><code>view</code> (object): The type property of the view defines if the page view should be generated (build) or if specified ui elements should be mapped to existing ui elements in the html page.<ul> <li><code>type</code> (string): The type of the view ('build' or 'map'). Must be one of: <code>['build', 'map']</code>.</li> </ul> </li> <li><code>scriptUri</code> (string/format: uri-reference): Absolute or relative url to the process-page module. this module will be merged with the process module. Activities can use the module function when they specify a 'moduleFunction' instead of 'bridgeCapability'.</li> <li><code>common</code> (object): Settings for the common part. Common activities can reference to all services.<ul> <li><code>ui</code>: Settings of the common UI part. Refer to PP-UISettings.</li> </ul> </li> <li><code>schemaUri</code> (string) (required) : The uri to the RIDAGOP schema to be used. The uri of this file.</li> <li><code>local_prefix_path</code> (string): Prefix path for all files specified with relative path.</li> </ul>"},{"location":"schemas/process-page/#definitions","title":"Definitions","text":""},{"location":"schemas/process-page/#pp-service","title":"PP-Service","text":"<ul> <li><code>PP-Service</code> (object): A service as it is defined in the ProcessPage. Compared to Services defined in the Process, these cannot define activities.<ul> <li><code>title</code> (string): The title of the service. Overwrites the title in the process.</li> <li><code>ui</code>: Settings of the service UI part. Refer to PP-UISettings. Default: <code>{}</code>.</li> <li><code>parameters</code> (object): Parameters that are available to all activities of the service.<ul> <li>Additional Properties: Refer to process#P-Parameter.</li> </ul> </li> <li><code>autostart</code>: List of activities (names/keys in the the activities objects) that should be started automatically on startup (either a string or a list of strings).</li> <li><code>bridge</code>: The bridge definition for the service. Refer to process#P-BridgeDefinition.</li> </ul> </li> </ul>"},{"location":"schemas/process-page/#pp-uisettings","title":"PP-UISettings","text":"<ul> <li><code>PP-UISettings</code> (object): UI settings.<ul> <li><code>sections</code> (object): Each service has three sections: input, output and status.<ul> <li><code>input</code> (object): The input section of the UI. This section is used to specify all the UI input elements (inputFields, buttons, checkboxes, ...)for the service.<ul> <li><code>display</code> (boolean): Whether to display the input section. Note that the service UI is more elaborate in the process description. Default: <code>True</code>.</li> <li><code>inputFields</code> (object): The input fields (textfields) of the service.<ul> <li>Additional Properties (object)<ul> <li><code>default</code> (string): Overwrite the default parameter of the process.</li> <li><code>display</code> (boolean): Whether to display the input field. Default: <code>True</code>.</li> </ul> </li> </ul> </li> <li><code>blocks</code> (array): Block are used for generated UI and allows grouping UI-Elements.<ul> <li>Items (object): Each item in the list is a block.<ul> <li><code>name</code> (string) (required) : Name of the block.</li> <li><code>title</code> (string): Title of the block visible in the UI.</li> <li><code>description</code> (string): Description of the block visible in the UI.</li> <li><code>items</code> (array) (required) : List of items in the UI block. Each item is a UI-Element name.<ul> <li>Items (string): Name of the UI-Element.</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>output</code> (object): Settings for the output section. This can be used to display results of an activity.<ul> <li><code>display</code> (boolean): Whether to display the output section. Default: <code>True</code>.</li> </ul> </li> <li><code>status</code> (object): Settings for the status section. This section shows which activities have been executed.<ul> <li><code>display</code> (boolean): Whether to display the status section. Default: <code>True</code>.</li> </ul> </li> </ul> </li> <li><code>display</code> (boolean): Whether for the display of the page. This is only relevant when the page is generated (build). Default: <code>True</code>.</li> </ul> </li> </ul>"},{"location":"schemas/process/","title":"RIDAGOP toolkit Process-Schema","text":"<p>A process in the IDS toolkit</p>"},{"location":"schemas/process/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string) (required) : The name of the process. This is the name for internal identification (although there is only one process).</li> <li><code>title</code> (string): The title of the process.</li> <li><code>description</code> (string): A description of the process. (For other developers).</li> <li><code>services</code> (object) (required) : Services with their UI-elements and activities.<ul> <li>Additional Properties: Each key specifies the name of a service. Refer to P-Service.</li> </ul> </li> <li><code>common</code> (object): Common activities and ui elements (access to activities of other services). Default: <code>{'ui': {}, 'activities': {}}</code>.<ul> <li><code>ui</code> (object): UI-elements that are available for the activities defined in the common section. Default: <code>{}</code>.<ul> <li><code>buttons</code> (object): UI-Buttons. These buttons can trigger activities of all services of this process.<ul> <li>Additional Properties (object): key is the name of the button.<ul> <li><code>label</code> (string) (required) : The label of the button.</li> <li><code>triggerActivity</code> (string) (required) : The name of the activity that is triggered. The activity must be of the same service.</li> <li><code>activityService</code> (string): The name of the service that contains the activity that is triggered.</li> <li><code>triggerSequence</code> (string): The name of the sequence that is triggered. The sequence must be of the same service.</li> </ul> </li> </ul> </li> </ul> </li> <li><code>activities</code> (object): Some activities. Consider that the bridge does not have a bridge, so these activities can only have module-functions.<ul> <li>Additional Properties (object): Each key specifies the name of an activity.<ul> <li><code>One of (1)</code>: Refer to P-Activity.</li> <li><code>One of (2)</code>: Refer to P-CommonActivity.</li> </ul> </li> </ul> </li> <li><code>sequences</code> (object): A sequence is a list of activities. This is for convenience for tirggereing multiple activities at once.<ul> <li>Additional Properties (object)<ul> <li><code>title</code> (string): The user visible title of the sequence.</li> <li><code>activities</code> (array): The list of activities that are executed when the sequence is triggered.<ul> <li>Items (string): The name of an activity.</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>scriptUri</code> (string/format: uri-reference): The URI of the script that is used to run the process.</li> </ul>"},{"location":"schemas/process/#definitions","title":"Definitions","text":""},{"location":"schemas/process/#p-service","title":"P-Service","text":"<ul> <li><code>P-Service</code> (object): A service as it is defined in the Process. Includes UI-elements, activities and shared parameters and the bridge.<ul> <li><code>title</code> (string): The user visible title of the service.</li> <li><code>ui</code>: The UI-elements of the service. Refer to P-ServiceUI. Default: <code>{}</code>.</li> <li><code>parameters</code> (object): Parameters that are usable by all activities of this service.<ul> <li>Additional Properties: Refer to P-Parameter.</li> </ul> </li> <li><code>autostart</code>: Activities that are started on page load.</li> <li><code>bridge</code>: The bridge of this service. Refer to P-BridgeDefinition.</li> <li><code>activities</code> (object): The activities of this service.<ul> <li>Additional Properties: Each key specifies the name of an activity. Refer to P-Activity.</li> </ul> </li> <li><code>sequences</code> (object): A sequence is a list of activities. This is for convenience for tirggereing multiple activities at once.<ul> <li>Additional Properties (object): Each key specifies the name of a sequence.<ul> <li><code>title</code> (string): The user visible title of the sequence.</li> <li><code>activities</code> (array): The list of activities that are executed when the sequence is triggered.<ul> <li>Items (string): The name of an activity.</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"schemas/process/#p-activity","title":"P-Activity","text":"<ul> <li><code>P-Activity</code> (object): An activity which uses the bridge or a module function.<ul> <li><code>preProcess</code> (string): a module function that is called before the activity is executed.</li> <li><code>comment</code> (string): A comment.</li> <li><code>parameters</code> (object): Parameters that are required by this activity.<ul> <li>Additional Properties: A parameter-name defined by the bridgeCapability or moduleFunction. Refer to P-Parameter.</li> </ul> </li> <li><code>requestBody</code> (object): The request body of the activity (only relevant when using OpenAPI execution).<ul> <li>Additional Properties (object): Used when the body is multipart/form-data.</li> <li><code>data</code> (object): Used when the body is a JSON object.<ul> <li><code>fileInput</code> (string): The name of the file input html-Element.</li> <li><code>store</code>: Some data in the store. Refer to P-StoreAccess.</li> </ul> </li> </ul> </li> <li><code>requiredActivities</code> (array): A list of activities that must be executed before this activity is executed.<ul> <li>Items (object): An activity that needs to be executed before this activity can be executed.<ul> <li><code>serviceName</code> (string): The name of the service that contains the activity.</li> <li><code>activityName</code> (string) (required) : The name of the activity.</li> <li><code>errorMessage</code> (string): The error message that is shown when the activity is not executed (only for generated UI).</li> </ul> </li> </ul> </li> <li><code>storeResult</code>: Storing the result of the activity for later use. Refer to P-Store.</li> <li><code>subActivities</code> (object): Sub-activities are activities that are executed after this parent activity is executed.<ul> <li>Additional Properties: Each key specifies the name of a sub-activity. Refer to P-Activity.</li> </ul> </li> <li><code>ui</code> (object): Some UI related settings for the activity.<ul> <li><code>includeInStatus</code> (boolean): If true, the activity is included in the status of the service (default true).</li> <li><code>resultAsOutputHtml</code>: If the result of the activity should be shown on the page. For generated UI, there is a output section for each service. For mapped UI, a string can be used in order to specify the html element (element id).<ul> <li><code>One of (1)</code> (boolean)</li> <li><code>One of (2)</code> (string)</li> </ul> </li> <li><code>resultAsDynamicUI</code> (boolean): The result of this activity is used to generate some new UI-elements. The result data needs to validate against the process-Service UI schema.</li> <li><code>alert</code> (boolean): Configure if the activity should show an alert when it is finished (default on top level activities is true).</li> </ul> </li> <li><code>debug</code> (object): Some debug related settings for the activity.<ul> <li><code>execute</code> (boolean): If false, the activity is not executed (default true).</li> <li><code>resultData</code> (object): Instead of executing the activity, the resultData is used as the result of the activity.</li> </ul> </li> <li><code>One of (1)</code><ul> <li><code>title</code> (string) (required) : The user visible title of the activity.</li> <li><code>bridgeCapability</code> (required) : The name of the bridge capability that is used to execute the activity. Refer to capabilities_names_list.</li> </ul> </li> <li><code>One of (2)</code><ul> <li><code>title</code> (string) (required) : The user visible title of the activity.</li> <li><code>moduleFunction</code> (string) (required) : The name of the module function (??? FROM WHERE) that is used to execute the activity.</li> </ul> </li> </ul> </li> </ul>"},{"location":"schemas/process/#p-serviceui","title":"P-ServiceUI","text":"<ul> <li><code>P-ServiceUI</code> (object): The UI of a service. Consider that many of the properties are only relevant when the Ui is generated. Default: <code>{}</code>.<ul> <li><code>inputFields</code> (object): Inputfields are text-fields or text-areas.<ul> <li>Additional Properties (object): key is the name of the input field.<ul> <li><code>label</code> (string): The label of the input field.</li> <li><code>fromQueryParam</code> (string): If this property is set, the field is initiated with the value of the query parameter.</li> <li><code>default</code> (string): The default value of the input field.</li> <li><code>textArea</code> (boolean): If true, the input field is a text area (which is nicer for longer inputs.</li> <li><code>inputActions</code> (object): Adds a small button next to the input. Clicking that or pressing enter triggers an action.<ul> <li><code>autoAction</code> (string): The name of the action that is triggered.</li> </ul> </li> </ul> </li> </ul> </li> <li><code>buttons</code> (object): Buttons are used to trigger actions.<ul> <li>Additional Properties (object): key is the name of the button.<ul> <li><code>label</code> (string): The label of the button.</li> <li><code>triggerActivity</code> (string): The name of the activity that is triggered. The activity must be of the same service.</li> <li><code>triggerSequence</code> (string): The name of the sequence that is triggered. The sequence must be of the same service.</li> </ul> </li> </ul> </li> <li><code>checkBoxes</code> (object): Checkboxes are used to trigger actions.<ul> <li>Additional Properties (object): key is the name of the checkbox.<ul> <li><code>label</code> (string): The label of the checkbox.</li> <li><code>default</code> (boolean): The default value of the checkbox. Default: <code>False</code>.</li> </ul> </li> </ul> </li> <li><code>selects</code> (object): Selects items.<ul> <li>Additional Properties (object): key is the name of the select.<ul> <li><code>label</code> (string): The label of the select.</li> <li><code>options</code> (array): The options of the select.<ul> <li>Items (object): An individual option.<ul> <li><code>label</code> (string) (required) : The label of the option visible to the user.</li> <li><code>value</code> (string) (required) : The value of the option.</li> </ul> </li> </ul> </li> <li><code>default</code> (string): The default value of the select.</li> </ul> </li> </ul> </li> <li><code>fileInputs</code> (object): File inputs are used to upload files.<ul> <li>Additional Properties (object): key is the name of the file input.<ul> <li><code>label</code> (string): The label of the file input.</li> <li><code>accept</code> (string): The file types that are accepted (MIME type).</li> <li><code>binary</code> (boolean): If true, the file is read as binary. Otherwise it is read as text.</li> <li><code>readImmediately</code> (boolean): If true, the file is read immediately. Otherwise it is read when an activity that requires it is triggered.</li> <li><code>keepAsFile</code> (boolean): If true, the file is not read but just used like that in a multipart-form.</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"schemas/process/#p-commonactivity","title":"P-CommonActivity","text":"<ul> <li><code>P-CommonActivity</code> (object): A activity in the common section of the process, can be a regular activity or a reference to an activity of any service.<ul> <li><code>One of (1)</code><ul> <li><code>preProcess</code> (string): a module function that is called before the activity is executed.</li> <li><code>comment</code> (string): A comment for developers.</li> <li><code>parameters</code> (object): Parameters that are required by this activity.<ul> <li>Additional Properties: Refer to P-Parameter.</li> </ul> </li> <li><code>requestBody</code> (object): The request body of the activity (only relevant when using OpenAPI execution).<ul> <li>Additional Properties (object): Used when the body is multipart/form-data.</li> <li><code>data</code> (object): Used when the body is a JSON object.<ul> <li><code>fileInput</code> (string): The name of the file input html-Element.</li> <li><code>store</code>: Some data in the store. Refer to P-StoreAccess.</li> </ul> </li> </ul> </li> <li><code>requiredActivities</code> (array): A list of activities that must be executed before this activity is executed.<ul> <li>Items (object): An activity that needs to be executed before this activity can be executed.<ul> <li><code>serviceName</code> (string): The name of the service that contains the activity.</li> <li><code>activityName</code> (string) (required) : The name of the activity.</li> </ul> </li> </ul> </li> <li><code>storeResult</code>: Storing the result of the activity for later use. Not exactly like in a service. The context can only be process or activity.<ul> <li><code>context</code> (string): The context of the variable.                - Process: Variable is available by all services and their activities.                - Service: Variable is available by all activities of this service.                - Activity: Variable is available to this activity and its sub-activities and deleted afterwards.  Must be one of: <code>['process', 'activity']</code>. Default: <code>service</code>.</li> <li><code>key</code> (string) (required) : key in the store ( dots are not allowed).</li> </ul> </li> <li><code>subActivities</code> (object): Sub-activities are activities that are executed after this parent activity is executed.<ul> <li>Additional Properties: Each key specifies the name of a sub-activity (Either a normal activity or a reference). Refer to P-CommonActivity.</li> </ul> </li> <li><code>debug</code> (object): Some debug related settings for the activity.<ul> <li><code>execute</code> (boolean): If false, the activity is not executed (default true).</li> <li><code>resultData</code> (object): Instead of executing the activity, the resultData is used as the result of the activity.</li> </ul> </li> <li><code>One of (1)</code><ul> <li><code>title</code> (string) (required) : The title of the activity.</li> <li><code>bridgeCapability</code> (required) : The bridge-capability that is used for this activity. Refer to capabilities_names_list.</li> </ul> </li> <li><code>One of (2)</code><ul> <li><code>title</code> (string) (required) : The title of the activity.</li> <li><code>moduleFunction</code> (string) (required) : The function that is used to execute the activity.</li> </ul> </li> </ul> </li> <li><code>One of (2)</code>: A reference to a activity that is defined in a service of the process.<ul> <li><code>title</code> (string) (required) : The user visible title of the activity.</li> <li><code>serviceName</code> (string) (required) : The name of the service that has the activity that should be executed.</li> <li><code>activityName</code> (string) (required) : The name of the activity that should be executed.</li> <li><code>subActivities</code> (object): Sub-activities are activities that are executed after this parent activity is executed.<ul> <li>Additional Properties<ul> <li><code>One of (1)</code>: A normal activity. Refer to P-Activity.</li> <li><code>One of (2)</code>: An activity of reference activity. Refer to P-CommonActivity.</li> </ul> </li> </ul> </li> <li><code>debug</code> (object): Some debug related settings for the activity.<ul> <li><code>execute</code> (boolean): If false, the activity is not executed (default true).</li> <li><code>resultData</code> (object): Instead of executing the activity, the resultData is used as the result of the activity.</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"schemas/process/#p-postprocess","title":"P-PostProcess","text":"<ul> <li><code>P-PostProcess</code> (array): function that processes the activity result before it is stored or passed on to other activities.</li> </ul>"},{"location":"schemas/process/#p-parameter","title":"P-Parameter","text":"<ul> <li><code>P-Parameter</code> (object): Parameter for an activity.<ul> <li><code>type</code> (string): Type of the parameter value. Must be one of: <code>['string', 'number', 'boolean']</code>.</li> <li><code>parent</code>: Result from the parent activity passed down (to this sub-activity).</li> <li><code>previous</code>: Result from the previous sub-activity.</li> <li><code>field</code> (string): Data from an Inputfield, Checkbox or Select.</li> <li><code>queryParam</code> (string): Data from a URL-query parameter.</li> <li><code>constant</code> (string): A constant non changing value specified here.</li> <li><code>fileInput</code> (string): Data from a file-input field UI-Element.</li> <li><code>store</code>: Data from the store. Refer to P-StoreAccess.</li> <li><code>generate</code> (object): Generate a value based on an activity.<ul> <li><code>bridgeCapability</code> (string): The name of the bridge capability that is used to execute the activity.</li> <li><code>moduleFunction</code> (string): The name of the module function (??? FROM WHERE) that is used to execute the activity.</li> <li><code>parameters</code> (object): Parameters that are required by this activity.<ul> <li>Additional Properties: A parameter-name defined by the bridgeCapability or moduleFunction defined for this 'generate' parameters. Refer to P-Parameter.</li> </ul> </li> </ul> </li> <li><code>dynamic</code> (boolean): if true, the parameter is not passed to the activity, but is used to generate a dynamic UI.</li> <li><code>comment</code> (string): A comment for other developers.</li> </ul> </li> </ul>"},{"location":"schemas/process/#p-servicebridge","title":"P-ServiceBridge","text":"<ul> <li><code>P-ServiceBridge</code> (object): The bridge for this service.<ul> <li><code>One of (1)</code><ul> <li><code>uri</code> (string/format: uri-reference) (required) : The URI of the bridge description json file.</li> </ul> </li> <li><code>One of (2)</code><ul> <li><code>instance</code> (required) : The bridge description. Refer to bridge.</li> </ul> </li> </ul> </li> </ul>"},{"location":"schemas/process/#p-bridgedefinition","title":"P-BridgeDefinition","text":"<ul> <li><code>P-BridgeDefinition</code> (object): The bridge definition, containing the source (either uri or the whole instance) and some additional properties.<ul> <li><code>source</code> (required) : The source (uri or instance). Refer to P-ServiceBridge.</li> <li><code>server</code>: The server host of this service bridge. Refer to P-BridgeServerHost.</li> <li><code>authorization</code> (object): From where to take the authorization code for OpenAPI bridge. Usually a API/Auth-Token.<ul> <li>Additional Properties</li> </ul> </li> </ul> </li> </ul>"},{"location":"schemas/process/#p-bridgeserverhost","title":"P-BridgeServerHost","text":"<ul> <li><code>P-BridgeServerHost</code>: The server host of this service bridge.<ul> <li><code>One of (1)</code> (string/format: uri): The server host of this service bridge.</li> <li><code>One of (2)</code> (object): from a input-field UI-Element (textfield/textarea).<ul> <li><code>field</code> (string) (required) : Name of the input-field UI-Element.</li> </ul> </li> <li><code>One of (3)</code> (object)<ul> <li><code>queryParam</code> (string) (required) : URL query parameter.</li> </ul> </li> <li><code>One of (4)</code> (object)<ul> <li><code>constant</code> (string/format: uri) (required) : a constant non changing value.</li> </ul> </li> </ul> </li> </ul>"},{"location":"schemas/process/#p-store","title":"P-Store","text":"<ul> <li><code>P-Store</code> (object): Description for storing activity results. Results can be stored on 3 levels (context), in order to prevent name collisions: process, service (default), activity.<ul> <li><code>context</code> (string): The context of the variable.        - Process: Variable is available by all services and their activities.        - Service: Variable is available by all activities of this service.        - Activity: Variable is available to this activity and its sub-activities and deleted afterwards.  Must be one of: <code>['process', 'service', 'activity']</code>. Default: <code>service</code>.</li> <li><code>key</code> (string) (required) : key in the store ( dots are not allowed).</li> </ul> </li> </ul>"},{"location":"schemas/process/#p-storeaccess","title":"P-StoreAccess","text":"<ul> <li><code>P-StoreAccess</code> (object): Description for accessing a stored value.<ul> <li><code>context</code> (string): From which context to access the variable. See P-Store. Must be one of: <code>['service', 'process', 'activity']</code>. Default: <code>service</code>.</li> <li><code>key</code> (string) (required) : key in the store.</li> </ul> </li> </ul>"}]}